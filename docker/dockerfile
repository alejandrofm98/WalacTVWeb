# Etapa 1: Build de Angular
FROM node:20-alpine AS builder

WORKDIR /app

# Copiar archivos de dependencias
COPY package*.json ./

# Instalar dependencias
RUN npm ci --legacy-peer-deps

# Copiar todo el c√≥digo fuente
COPY . .

# ARGs que vienen de Dokploy
ARG API_WALACTV
ARG ACE_STREAM_HOST
ARG APP_NAME
ARG FIREBASE_API_KEY
ARG FIREBASE_AUTH_DOMAIN
ARG FIREBASE_DATABASE_URL
ARG FIREBASE_PROJECT_ID
ARG FIREBASE_STORAGE_BUCKET
ARG FIREBASE_MESSAGING_SENDER_ID
ARG FIREBASE_APP_ID

# üîß Crear environment.ts din√°micamente para que Angular compile correctamente
RUN echo "export const environment = { \
  production: true, \
  apiWalactv: '${API_WALACTV}', \
  acestreamHost: '${ACE_STREAM_HOST}', \
  appName: '${APP_NAME}', \
  firebase: { \
    apiKey: '${FIREBASE_API_KEY}', \
    authDomain: '${FIREBASE_AUTH_DOMAIN}', \
    databaseURL: '${FIREBASE_DATABASE_URL}', \
    projectId: '${FIREBASE_PROJECT_ID}', \
    storageBucket: '${FIREBASE_STORAGE_BUCKET}', \
    messagingSenderId: '${FIREBASE_MESSAGING_SENDER_ID}', \
    appId: '${FIREBASE_APP_ID}' \
  } \
};" > src/environments/environment.ts

# Compilar Angular en modo producci√≥n
RUN npm run build -- --configuration production

# Etapa 2: Servir con http-server
FROM node:20-alpine

WORKDIR /app

# Instalar http-server globalmente
RUN npm install -g http-server

# Copiar los archivos compilados
COPY --from=builder /app/dist/walactvWeb/browser ./dist

EXPOSE 8080

CMD ["http-server", "./dist", "-p", "8080", "--proxy", "http://localhost:8080?"]
